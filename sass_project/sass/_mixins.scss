// For this mixin we need 
//	<nav> 
//		<ul id="nav">
//			<li>
//				<a href="#">Uno</a>
//			<li>
//				<a href="#">Dos</a>
//			</li>
//		</ul>
//		<button class="button">
//			Default
//		</button>
//	</nav>


@mixin navigation-list($color,$background-color,$padding) {
    list-style-type:none;
    margin:0;
    > li{
        display:block;
        float:left;
        &:last-child{
            margin-right:0px;
        }

        > a{
        	display: block;
        	padding: $padding;
        	background-color: $background-color;
        	color: $color;
        	text-decoration: none;
        }
    }
}

@mixin border_radius($radius:  5px){
	border-radius: $radius;
	-moz-border-radius: $radius;
	-webkit-border-radius: $radius;
	-o-border-radius: $radius;
}

@mixin box-shadow($top, $left, $blur, $size, $color, $inset: false) {
	@if $inset {
		-webkit-box-shadow:inset $top $left $blur $size $color;
		-moz-box-shadow:inset $top $left $blur $size $color;
		box-shadow:inset $top $left $blur $size $color;
	} 
	@else {
		-webkit-box-shadow: $top $left $blur $size $color;
		-moz-box-shadow: $top $left $blur $size $color;
		box-shadow: $top $left $blur $size $color;
	}
}

@mixin custom-button($width, $height, $background-color, $color){
	outline: none;
	border: none;
	width: $width;
	height: $height;
	background-color: $background-color;
	color: $color;
	text-align: center;
}

// For this mixin we need 

//<div class="styled-select-content">
//	<div class="styled-select">
//		<div class="styled-select-name">
//			<select class="styled-select-state pointer">
//				<option>Selecciona...</option>
//			</select>
//		</div>
//	</div>
// </div>

@mixin custom-dropdown($width,$height,$margin,$background-color,$color,$font-size, $size-arrow, $arrow-right, $border-right){
	width: 100%;
	position: relative;

	&:after{
		content: " ";
		width: 1px;
		height: $height;
		position: absolute;
		background-color: #FFF;
		right: $border-right;
		top: 0;
	}

	.styled-select{
		overflow: hidden;
		@include border_radius(10px);
		height: $height;
		width: $width;
		margin: $margin;
		position: relative;
		background-color: $background-color;

		&:after{
			content: " ";
			border-color: #FFF transparent transparent transparent;
			border-style: solid;
			border-width: $size-arrow; 
			position: absolute;
			right: $arrow-right;
			top: $height / 2 - 10;
			z-index: 1;
		}
	}
	
	.styled-select-name{
		overflow: hidden;
		width: 110%;
		height: $height;
		position: relative;
		z-index: 2;
	}
	
	.styled-select-option{
		outline: none;
		background: transparent;
		width: 110%;
		height: $height;
		padding: 0 0 0 20px;
		border:0;
		appearance: none;
		-webkit-appearance: none;
		-moz-appearance:    none;
		-ms-appearance: none;
		-o-appearance: none;
		-khtml-appearance: none;
			@include border_radius(10px);
		color: $color;
		font-size: $font-size;
	}
	
}

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

@mixin clearfix() {
    & {
        *zoom: 1;
    }
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

@mixin box-sizing($box-model: border-box) {
		-webkit-box-sizing: $box-model; // Safari <= 5
		-moz-box-sizing: $box-model; // Firefox <= 19
		box-sizing: $box-model;
}

@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin center-block($margin-top, $margin-bottom) {
	 display: block;
	 margin: $margin-top auto $margin-bottom auto;
}


@mixin vertical-align-text($height){
	display: table-cell;
	vertical-align: middle;
	height: $height;
}

@mixin menu-mobile($width: 50px, $padding: 5px, $background-color:#262626 , $lines-background-color: #FFF, $lines-height: 5px, $lines-margin: 5px auto, $lines-radius: 5px ){
	padding: $padding;
	background-color: $background-color;
	width: $width;

	> .lines{
		width: 90%;
		background-color: $lines-background-color;
		height: $lines-height;
		margin: $lines-margin;
		@include border-radius ($lines-radius);
	}
}

@mixin vertical-align-element(){
	position: absolute;
	right: 0;
	left: 0;
	bottom: 0;
	top: 0;
	margin: auto;
	
}


//@mixin font-size($size: 1, $line: $size * 1.5){
// font-size     : ($size * 16) + px;
//  line-height   : ($line * 16) + px;
//  font-size     : $size + rem;
//  line-height   : $line + rem;
//}

@mixin circle($size, $background-color){
	width: $size;
	height: $size;
	background-color: $background-color;
	border-radius: 50%;
}

@mixin retina {
  $retina-support-respondjs: 0 !default;

  @media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi) {
    // Note: Respond.js does not support pixel-ratio media queries so older browsers (IE8) will apply styles defined within the query.
    // To hide the styles from IE8, add the code within html.mediaqueries
    @if ($retina-support-respondjs == 1) {
      html.mediaqueries & {
        @content;
      }
    }
    @else {
      @content;
    }
  }
}

@mixin retina-background($file, $attr: "", $type: "png") {
  @if $attr != "" {
    background: $attr;
  }

  $image: $file + "." + $type;
  $image2x: $file + "@2x." + $type;

  background-image: image-url($image);

  $width: image-width($image);
  $height: image-height($image);
 
  @include retina {
    background-image: image-url($image2x);
    background-size: $width $height;
  }
}


$retina-sprite-names     : 0;
$retina-sprite-sprites   : 0;
$retina-sprite-urls      : 0;
$retina-sprite-sprites2x : 0;
$retina-sprite-urls2x    : 0;

@mixin retina-sprite($name, $sprite-name: 0, $hover: false, $active: false) {
  $index: 2;
  $len: length($retina-sprite-names);

  @for $i from $index through $len {
    @if $sprite-name == nth($retina-sprite-names, $i) {
      $index: $i;
    }
  }

  $sprite       : nth($retina-sprite-sprites, $index);
  $sprite-url   : nth($retina-sprite-urls, $index);
  
  $sprite2x     : nth($retina-sprite-sprites2x, $index);
  $sprite-url2x : nth($retina-sprite-urls2x, $index);

  @include _retina-sprite($name, $sprite, $sprite-url, $sprite2x, $sprite-url2x, $hover, $active);
}

@mixin retina-sprite-add($name, $path, $path2x) {
  $retina-sprite-spacing: 2px !default;

  $sprite   : sprite-map($path, $spacing: $retina-sprite-spacing);
  $sprite2x : sprite-map($path2x, $spacing: $retina-sprite-spacing);

  $retina-sprite-names     : append($retina-sprite-names, $name);

  $retina-sprite-sprites   : append($retina-sprite-sprites, $sprite);
  $retina-sprite-urls      : append($retina-sprite-urls, sprite-url($sprite));

  $retina-sprite-sprites2x : append($retina-sprite-sprites2x, $sprite2x);
  $retina-sprite-urls2x    : append($retina-sprite-urls2x, sprite-url($sprite2x));
}

@mixin _retina-sprite($name, $sprite, $sprite-url, $sprite2x, $sprite-url2x, $hover, $active, $dimensions: true, $pad: 0) {  
  @if $dimensions == true {
    @include sprite-dimensions($sprite, $name);
  }
  background-image: $sprite-url;
  background-position: sprite-position($sprite, $name, -$pad, -$pad);
  background-repeat: no-repeat;

  @if $hover == true {
    $name_hover: $name + _hover;
    &:hover {
      background-position: sprite-position($sprite, $name_hover, -$pad, -$pad);
    }
  }
  @if $active == true {
    $name_active: $name + _active;
    &:active {
      background-position: sprite-position($sprite, $name_active, -$pad, -$pad);
    }
  }
  
  @if $pad > 0 {
    padding: $pad;
  }
  
  @include retina {
    $pos: sprite-position($sprite2x, $name, -$pad * 2, -$pad * 2);
    background-image: $sprite-url2x;
    background-position: nth($pos, 1) nth($pos, 2) / 2;
    @include background-size(ceil(image-width(sprite-path($sprite2x)) / 2) auto);
    //  sprite-path() returns the path of the generated sprite sheet, which
    //  image-width() calculates the width of. the ceil() is in place in case
    //  you have sprites that have an odd-number of pixels in width
    
    @if $hover == true {
      $name_hover: $name + _hover;    // create myButton_hover and assign it
      &:hover{
        $pos: sprite-position($sprite2x, $name_hover, -$pad * 2, -$pad * 2);
        background-position: nth($pos, 1) nth($pos, 2) / 2;
      }
    }
    @if $active == true {
      $name_active: $name + _active;    // create myButton_active and assign it
      &:active{
        $pos: sprite-position($sprite2x, $name_active, -$pad * 2, -$pad * 2);
        background-position: nth($pos, 1) nth($pos, 2) / 2;
      }
    }
  }
}

// Mixin navigation-list 
// Mixin border-radius 
// Mixin box-shadow 
// Mixin custom-button 
// Mixin custom-dropdown 
// Mixin image-2x 
// Mixin clearfix 
// Mixin box-sizing 
// Mixin opacity 
// Mixin center-block 
// Mixin vertical-align-text 
// Mixin menu-mobile 
// Mixin vertical-align-element 
// Mixin circle 
// Mixin restina sprite 

